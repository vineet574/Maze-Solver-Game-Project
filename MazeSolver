
import java.util.*;
public class MazeSolver {
    public static void main(String[] args) {
        char[][] maze = generateMaze(10, 10);
        printMaze(maze);
        System.out.println("Shortest path calculated by AI:");
        solveMaze(maze);
    }
    
    private static char[][] generateMaze(int rows, int cols) {
        char[][] maze = new char[rows][cols];
        Random rand = new Random();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maze[i][j] = rand.nextBoolean() ? '.' : '#';
            }
        }
        maze[0][0] = 'S';
        maze[rows - 1][cols - 1] = 'E';
        return maze;
    }
    
    private static void printMaze(char[][] maze) {
        for (char[] row : maze) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }
    
    private static void solveMaze(char[][] maze) {
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int rows = maze.length, cols = maze[0].length;
        boolean[][] visited = new boolean[rows][cols];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {0, 0});
        visited[0][0] = true;

        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int x = curr[0], y = curr[1];
            if (maze[x][y] == 'E') {
                System.out.println("Reached the endpoint!");
                return;
            }
            for (int[] dir : directions) {
                int nx = x + dir[0], ny = y + dir[1];
                if (nx >= 0 && ny >= 0 && nx < rows && ny < cols && maze[nx][ny] != '#' && !visited[nx][ny]) {
                    visited[nx][ny] = true;
                    queue.add(new int[] {nx, ny});
                }
            }
        }
        System.out.println("No path found!");
    }
}
